/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package App;

import com.digitalpersona.onetouch.DPFPDataPurpose;
import com.digitalpersona.onetouch.DPFPFeatureSet;
import com.digitalpersona.onetouch.DPFPGlobal;
import com.digitalpersona.onetouch.DPFPSample;
import com.digitalpersona.onetouch.DPFPTemplate;
import com.digitalpersona.onetouch.capture.DPFPCapture;
import com.digitalpersona.onetouch.capture.event.DPFPDataAdapter;
import com.digitalpersona.onetouch.capture.event.DPFPDataEvent;
import com.digitalpersona.onetouch.capture.event.DPFPErrorAdapter;
import com.digitalpersona.onetouch.capture.event.DPFPErrorEvent;
import com.digitalpersona.onetouch.capture.event.DPFPReaderStatusAdapter;
import com.digitalpersona.onetouch.capture.event.DPFPReaderStatusEvent;
import com.digitalpersona.onetouch.capture.event.DPFPSensorAdapter;
import com.digitalpersona.onetouch.capture.event.DPFPSensorEvent;
import com.digitalpersona.onetouch.processing.DPFPEnrollment;
import com.digitalpersona.onetouch.processing.DPFPFeatureExtraction;
import com.digitalpersona.onetouch.processing.DPFPImageQualityException;
import com.digitalpersona.onetouch.verification.DPFPVerification;
import com.digitalpersona.onetouch.verification.DPFPVerificationResult;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import servicios.Conexion;
import servicios.Patietns;

/**
 *
 * @author Mauricio
 */
public class addFinger extends javax.swing.JDialog {

    Conexion cc = new Conexion();
    Connection cn = cc.conexion();
    FileInputStream fis;
    int longitudBytes;
    private final DPFPCapture Lector = DPFPGlobal.getCaptureFactory().createCapture();
    private final DPFPEnrollment Reclutador = DPFPGlobal.getEnrollmentFactory().createEnrollment();
    private final DPFPVerification Verificador = DPFPGlobal.getVerificationFactory().createVerification();
    private DPFPTemplate template;
    public static String TEMPLATE_PROPERTY = "template";
    public DPFPFeatureSet featuresinscripcion;
    public DPFPFeatureSet featuresverificacion;

    public addFinger(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        this.setSize(560, 400);
        initComponents();
        ocultarOpcIndices();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        HuellaDedos = new javax.swing.ButtonGroup();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtArea = new javax.swing.JTextArea();
        pnHuellas = new javax.swing.JPanel();
        lblImagenHuella = new javax.swing.JLabel();
        lblEstadohuellas = new javax.swing.JLabel();
        opcIndice2 = new javax.swing.JRadioButton();
        opcIndice = new javax.swing.JRadioButton();
        lblDocumentAddFinger = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Asociar Huellas");
        setMaximumSize(new java.awt.Dimension(560, 400));
        setMinimumSize(new java.awt.Dimension(560, 400));
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jPanel4.setBackground(new java.awt.Color(255, 255, 255));
        jPanel4.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        jPanel4.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        txtArea.setColumns(20);
        txtArea.setRows(5);
        jScrollPane1.setViewportView(txtArea);

        jPanel4.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 280, 370, 70));

        pnHuellas.setBackground(new java.awt.Color(230, 234, 243));
        pnHuellas.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        pnHuellas.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lblImagenHuella.setBackground(new java.awt.Color(255, 255, 255));
        lblImagenHuella.setOpaque(true);
        pnHuellas.add(lblImagenHuella, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 10, 180, 240));

        jPanel4.add(pnHuellas, new org.netbeans.lib.awtextra.AbsoluteConstraints(158, 15, 220, 260));

        lblEstadohuellas.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblEstadohuellas.setForeground(new java.awt.Color(33, 66, 149));
        lblEstadohuellas.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblEstadohuellas.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        jPanel4.add(lblEstadohuellas, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 352, 380, 20));

        HuellaDedos.add(opcIndice2);
        opcIndice2.setActionCommand("2");
        opcIndice2.setEnabled(false);
        opcIndice2.setOpaque(false);
        jPanel4.add(opcIndice2, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 10, -1, 20));

        HuellaDedos.add(opcIndice);
        opcIndice.setSelected(true);
        opcIndice.setActionCommand("1");
        opcIndice.setEnabled(false);
        opcIndice.setOpaque(false);
        opcIndice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                opcIndiceActionPerformed(evt);
            }
        });
        jPanel4.add(opcIndice, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 10, -1, -1));
        jPanel4.add(lblDocumentAddFinger, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 30, 100, 20));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 560, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, 560, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void opcIndiceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_opcIndiceActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_opcIndiceActionPerformed

    //Inicio metodo Start
    protected void Iniciar() {
        Lector.addDataListener(new DPFPDataAdapter() {
            @Override
            public void dataAcquired(final DPFPDataEvent e) {
                SwingUtilities.invokeLater(() -> {
                    try {
                        EnviarTexto("La Huella Digital ha sido Capturada");
                        ProcesarCaptura(e.getSample());
                    } catch (IOException | SQLException | InterruptedException ex) {
                        Logger.getLogger(addFinger.class.getName()).log(Level.SEVERE, null, ex);
                    }
                });
            }
        });

        Lector.addReaderStatusListener(new DPFPReaderStatusAdapter() {
            @Override
            public void readerConnected(final DPFPReaderStatusEvent e) {
                SwingUtilities.invokeLater(new Runnable() {
                    public void run() {
                        EnviarTexto("El Sensor de Huella Digital esta Activado o Conectado");
                    }
                });
            }

            @Override
            public void readerDisconnected(final DPFPReaderStatusEvent e) {
                SwingUtilities.invokeLater(new Runnable() {
                    public void run() {
                        EnviarTexto("El Sensor de Huella Digital esta Desactivado o no Conectado");
                    }
                });
            }
        });

        Lector.addSensorListener(new DPFPSensorAdapter() {
            @Override
            public void fingerTouched(final DPFPSensorEvent e) {
                SwingUtilities.invokeLater(new Runnable() {
                    public void run() {
                        EnviarTexto("El dedo ha sido colocado sobre el Lector de Huella");
                    }
                });
            }

            @Override
            public void fingerGone(final DPFPSensorEvent e) {
                SwingUtilities.invokeLater(new Runnable() {
                    public void run() {
                        EnviarTexto("El dedo ha sido quitado del Lector de Huella");
                    }
                });
            }
        });

        Lector.addErrorListener(new DPFPErrorAdapter() {
            public void errorReader(final DPFPErrorEvent e) {
                SwingUtilities.invokeLater(new Runnable() {
                    public void run() {
                        EnviarTexto("Error: " + e.getError());
                    }
                });
            }
        });
    }
    //Fin metodo Start

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        txtArea.setEditable(false);
        Iniciar();
        start();
        EstadoHuellas();
    }//GEN-LAST:event_formWindowOpened

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        Reclutador.clear();
        stop();
    }//GEN-LAST:event_formWindowClosed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(addFinger.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(addFinger.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(addFinger.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(addFinger.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                addFinger dialog = new addFinger(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup HuellaDedos;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    public javax.swing.JLabel lblDocumentAddFinger;
    private javax.swing.JLabel lblEstadohuellas;
    private javax.swing.JLabel lblImagenHuella;
    private javax.swing.JRadioButton opcIndice;
    private javax.swing.JRadioButton opcIndice2;
    private javax.swing.JPanel pnHuellas;
    public static javax.swing.JTextArea txtArea;
    // End of variables declaration//GEN-END:variables

    public void ProcesarCaptura(DPFPSample sample) throws IOException, SQLException, InterruptedException {
        // Procesar la muestra de la huella y crear un conjunto de características con el propósito de inscripción.
        featuresinscripcion = extraerCaracteristicas(sample, DPFPDataPurpose.DATA_PURPOSE_ENROLLMENT);
        // Procesar la muestra de la huella y crear un conjunto de características con el propósito de verificacion.
        featuresverificacion = extraerCaracteristicas(sample, DPFPDataPurpose.DATA_PURPOSE_VERIFICATION);
        // Comprobar la calidad de la muestra de la huella y lo añade a su reclutador si es bueno
        if (featuresinscripcion != null) {
            try {
//                    System.out.println("Las Caracteristicas de la Huella han sido creada");
                Reclutador.addFeatures(featuresinscripcion);// Agregar las caracteristicas de la huella a la plantilla a crear
                // Dibuja la huella dactilar capturada.
                Image image = CrearImagenHuella(sample);
                DibujarHuella(image);
            } catch (DPFPImageQualityException ex) {
                System.err.println("Error: " + ex.getMessage());
            } finally {
                EstadoHuellas();
                // Comprueba si la plantilla se ha creado.
                switch (Reclutador.getTemplateStatus()) {
                    case TEMPLATE_STATUS_READY:	// informe de éxito y detiene  la captura de huellas
                        stop();
                        setTemplate(Reclutador.getTemplate());
                        EnviarTexto("La Plantilla de la Huella ha Sido Creada, ya puede Verificarla o Identificarla");
                        guardarHuella(sample);
                        EstadoHuellas();
//                        btnGuardar.setEnabled(true);
//                        btnGuardar.grabFocus();
                        break;
                    case TEMPLATE_STATUS_FAILED: // informe de fallas y reiniciar la captura de huellas
                        Reclutador.clear();
                        stop();
                        EstadoHuellas();
                        setTemplate(null);
                        JOptionPane.showMessageDialog(this, "La Plantilla de la Huella no pudo ser creada, Repita el Proceso", "Inscripcion de Huellas Dactilares", JOptionPane.ERROR_MESSAGE);
                        start();
                        break;
                }
            }
        }
//        } else {
//            JOptionPane.showMessageDialog(null, "El usuario con número de documento: " + id + " no se encuentra registrado");
//        }

    }
    //Fin metodo procesar captura

    public void guardarHuella(DPFPSample sample) throws InterruptedException, SQLException, IOException {
        String id = lblDocumentAddFinger.getText();
        DPFPFeatureSet features = extraerCaracteristicas(sample, DPFPDataPurpose.DATA_PURPOSE_VERIFICATION);
        DPFPTemplate tHuePri = DPFPGlobal.getTemplateFactory().createTemplate();
        DPFPTemplate tHueSec = DPFPGlobal.getTemplateFactory().createTemplate();
        byte[] templateBuffer;
        boolean verify = false;
        String identificacion = "";
        String sbQuery = "SELECT id_paciente, tipo_identificacion, "
                + "	identificacion, nombre, apellidos, indice_d, indice_i"
                + "  FROM pacientes  WHERE "
                + "indice_d IS NOT NULL AND indice_i IS NOT NULL";
        PreparedStatement identificarStmt = cn.prepareStatement(sbQuery);
        ResultSet rsHuellas = identificarStmt.executeQuery();
        while (rsHuellas.next()) {
            templateBuffer = rsHuellas.getBytes("indice_d");
            tHuePri.deserialize(templateBuffer);
            templateBuffer = rsHuellas.getBytes("indice_i");
            tHueSec.deserialize(templateBuffer);
//            int id_P = rsHuellas.getInt("id_paciente");
//            String tipo_id = rsHuellas.getString("tipo_identificacion");
            identificacion = rsHuellas.getString("identificacion");
//            String nombre = rsHuellas.getString("nombre");
//            String apellido = rsHuellas.getString("apellidos");
            if (features != null) {
                DPFPVerificationResult resultHuePri = Verificador.verify(features, tHuePri);
                DPFPVerificationResult resultHueSec = Verificador.verify(features, tHueSec);
                if (resultHuePri.isVerified() || resultHueSec.isVerified()) {
                    if (!id.equals(identificacion)) {
                        verify = true;
                    }
                }
            }
        }
        if (!verify) {
            try {
                ByteArrayInputStream datosHuella = new ByteArrayInputStream(template.serialize());
                Integer tamañoHuella = template.serialize().length;
                String opc = HuellaDedos.getSelection().getActionCommand();
                String sqlH = "";
                String dedo = "Huella asociada correctamente..!";
                switch (opc) {
                    case "1":
                        sqlH = "UPDATE pacientes SET indice_d = ? WHERE (identificacion = ?)";
                        ImageIcon icon = (ImageIcon) lblImagenHuella.getIcon();
                        BufferedImage image = new BufferedImage(icon.getIconWidth(), icon.getIconHeight(), BufferedImage.TYPE_INT_RGB);
                        Graphics2D g2 = image.createGraphics();
                        g2.drawImage(icon.getImage(), 0, 0, icon.getImageObserver());
                        String formato = "jpg";
                        File fichero = new File("src/FingerTemp/foto" + id + ".jpg");
                        try {
                            ImageIO.write(image, formato, fichero);
                        } catch (IOException e) {
                            System.out.println("Error de escritura");
                        }
                        break;
                    case "2":
                        sqlH = "UPDATE pacientes SET indice_i = ? WHERE (identificacion = ?)";
                        break;
                }
                try (PreparedStatement guardarStmt = cn.prepareStatement(sqlH)) {
                    guardarStmt.setBinaryStream(1, datosHuella, tamañoHuella);
                    guardarStmt.setString(2, id);
                    //Ejecuta la sentencia
                    guardarStmt.execute();
                    opcIndice2.setSelected(true);
                    opcIndice.setSelected(false);
                    if (opc.equals("1")) {
                        Patietns pt = new Patietns();
                        boolean r = pt.guardarfoto(id, "src/FingerTemp/foto" + id + ".jpg");
                        if (r) {
                            System.out.println("ok");                            
                        } else {
                            System.out.println("problemas");
                        }
                    }
                }
                lblImagenHuella.setVisible(true);
                cc.desconectar();
                Reclutador.clear();//limpia el reclutador
                if (!opc.equals("2")) {
                    JOptionPane.showMessageDialog(null, dedo);
                    start();//inicia otra vez la captura
                } else {
                    JOptionPane.showMessageDialog(null, dedo);
                    stop();
                    this.dispose();
                }
            } catch (SQLException ex) {
                //Si ocurre un error lo indica en la consola
                System.err.println("Error al guardar los datos de la huella. " + ex);
            }
        } else {
            JOptionPane.showMessageDialog(null, "Ya existe un paciente con esa huella");
            Reclutador.clear();
            start();
        }

    }

    //Inicio metodo extraer caracteristicas huella
    public DPFPFeatureSet extraerCaracteristicas(DPFPSample sample, DPFPDataPurpose purpose) {
        DPFPFeatureExtraction extractor = DPFPGlobal.getFeatureExtractionFactory().createFeatureExtraction();
        try {
            return extractor.createFeatureSet(sample, purpose);
        } catch (DPFPImageQualityException e) {
            return null;
        }
    }

    public Image CrearImagenHuella(DPFPSample sample) {
        return DPFPGlobal.getSampleConversionFactory().createImage(sample);
    }

    //inicio metodo dibujar huella en el label
    public void DibujarHuella(Image image) {
        lblImagenHuella.setIcon(new ImageIcon(
                image.getScaledInstance(lblImagenHuella.getWidth(), lblImagenHuella.getHeight(), Image.SCALE_DEFAULT)));
        repaint();
    }

    public void EnviarTexto(String string) {

        txtArea.append(string + "\n");

    }

    public void start() {
        Lector.startCapture();
        EnviarTexto("Utilizando el Lector de Huella Dactilar ");
    }

    public void stop() {
        Lector.stopCapture();
        EnviarTexto("No se está usando el Lector de Huella Dactilar ");
    }

    public DPFPTemplate getTemplate() {
        return template;
    }

    public void setTemplate(DPFPTemplate template) {
        DPFPTemplate old = this.template;
        this.template = template;
        firePropertyChange(TEMPLATE_PROPERTY, old, template);
    }

    //inicio metodos abstractos
    public void EstadoHuellas() {
        lblEstadohuellas.setText("Muestras restantes necesarias para guardar template " + Reclutador.getFeaturesNeeded());
    }

    private void ocultarOpcIndices() {
        opcIndice.setVisible(false);
        opcIndice2.setVisible(false);
        lblDocumentAddFinger.setVisible(false);
    }

}
